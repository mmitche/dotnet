variables:
  - template: /eng/common-variables.yml
  - name: Build.Repository.Clean
    value: true
  - name: CheckNuGetSizesScript
    value: >-
      $nupkgs_large=(Get-ChildItem artifacts/packages/$(_BuildConfig)/Shipping -recurse -include "*.nupkg" | Select-Object Name,Length | Where-Object { $_.Length -gt 250*1MB });
      if ($nupkgs_large.Length -gt 0) { Write-Error "NuGet size exceeds 250MiB: $($nupkgs_large | Format-Table | Out-String)"; exit 1 }

trigger:
  batch: true
  branches:
    include:
    - main
    - release/*

pr:
  branches:
    include:
    - main
    - release/*

stages:
- stage: build
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enablePublishBuildArtifacts: true
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: true
      enableMicrobuild: true
      enableSourceBuild: true
      variables:
        - _BuildConfig: Release
      jobs:

      ############ macOS BUILD ############
      - job: Build_macOS
        displayName: macOS
        timeoutInMinutes: 30
        pool:
          vmImage: macOS-11
        steps:
        - bash: |
            ./build.sh -ci -configuration $(_BuildConfig) /p:PackageRID=osx-x64 /p:AssetManifestOS=osx /p:PlatformName=x64 $(_InternalBuildArgs) $(_NonWindowsInternalPublishArg)
          displayName: Build
        - publish: artifacts/packages
          artifact: Packages_macOS
        - bash: |
            rm -rf upstream node python
          displayName: Remove temporary artifacts
        - powershell: $(CheckNuGetSizesScript)
          displayName: Check NuGet sizes

      # Only run in case of in-build signing
      - ${{ if and(ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['PostBuildSign'], 'true')) }}:
        - job: Sign_macOS
          dependsOn: Build_macOS
          displayName: Sign macOS
          timeoutInMinutes: 30
          pool:
            name: NetCore1ESPool-Internal
            demands: ImageOverride -equals windows.vs2019.amd64
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: Packages_macOS
              path: 'artifacts/packages'

          - powershell: |
              ./eng/common/build.ps1 -ci -configuration $(_BuildConfig) -restore -sign -publish /p:PackageRID=osx-x64 /p:AssetManifestOS=osx /p:PlatformName=x64 $(_InternalBuildArgs)
            displayName: Sign and Publish

      ############ Linux BUILD ############
      - job: Build_Linux
        displayName: Linux
        timeoutInMinutes: 30
        pool:
          ${{ if eq(variables['System.TeamProject'], 'public') }}:
            vmImage: ubuntu-20.04
          ${{ if eq(variables['System.TeamProject'], 'internal') }}:
            name: NetCore1ESPool-Internal
            demands: ImageOverride -equals Build.Ubuntu.1804.Amd64
        steps:
        - bash: |
            ./build.sh -ci -configuration $(_BuildConfig) /p:PackageRID=linux-x64 /p:AssetManifestOS=linux /p:PlatformName=x64 $(_InternalBuildArgs) $(_NonWindowsInternalPublishArg)
          displayName: Build
        - publish: artifacts/packages
          artifact: Packages_Linux
        - bash: |
            rm -rf upstream node python
          displayName: Remove temporary artifacts
        - powershell: $(CheckNuGetSizesScript)
          displayName: Check NuGet sizes

      # Only run in case of in-build signing
      - ${{ if and(ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['PostBuildSign'], 'true')) }}:
        - job: Sign_Linux
          dependsOn: Build_Linux
          displayName: Sign Linux
          timeoutInMinutes: 30
          pool:
            name: NetCore1ESPool-Internal
            demands: ImageOverride -equals windows.vs2019.amd64
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: Packages_Linux
              path: 'artifacts/packages'

          - powershell: |
              ./eng/common/build.ps1 -ci -configuration $(_BuildConfig) -restore -sign -publish /p:PackageRID=linux-x64 /p:AssetManifestOS=linux /p:PlatformName=x64 $(_InternalBuildArgs)
            displayName: Sign and Publish

      ############ Windows BUILD ############
      - job: Build_Windows
        displayName: Windows
        timeoutInMinutes: 60
        pool:
          ${{ if eq(variables['System.TeamProject'], 'public') }}:
            vmImage: windows-2019
          ${{ if eq(variables['System.TeamProject'], 'internal') }}:
            name: NetCore1ESPool-Internal
            demands: ImageOverride -equals windows.vs2019.amd64
        steps:
        - powershell: |
            # update the machine cert store so that python can download the files as required by emscripten's install
            $WebsiteURL="storage.googleapis.com"
            Try {
                $Conn = New-Object System.Net.Sockets.TcpClient($WebsiteURL, 443)

                Try {
                    $Stream = New-Object System.Net.Security.SslStream($Conn.GetStream())
                    $Stream.AuthenticateAsClient($WebsiteURL)

                    $Cert = $Stream.Get_RemoteCertificate()

                    $ValidTo = [datetime]::Parse($Cert.GetExpirationDatestring())

                    Write-Host "`nConnection Successfull" -ForegroundColor DarkGreen
                    Write-Host "Website: $WebsiteURL"
                }
                Catch { Throw $_ }
                Finally { $Conn.close() }
                }
                Catch {
                        Write-Host "`nError occurred connecting to $($WebsiteURL)" -ForegroundColor Yellow
                        Write-Host "Website: $WebsiteURL"
                        Write-Host "Status:" $_.exception.innerexception.message -ForegroundColor Yellow
                        Write-Host ""
            }
          displayName: Fetch storage.googleapis.com certificate
          condition: eq(variables['System.TeamProject'], 'internal')
        - script: |
            .\build.cmd -ci -configuration $(_BuildConfig) -sign -publish /p:PackageRID=win-x64 /p:AssetManifestOS=win /p:PlatformName=x64 /p:workloadPackagesPath=$(Build.SourcesDirectory)\artifacts\packages\$(_BuildConfig)\Shipping $(_InternalBuildArgs)
          displayName: Build and Publish
        - publish: artifacts/packages
          artifact: Packages_Windows
        - script: |
            rmdir /s /q upstream node python
          displayName: Remove temporary artifacts
        # Upload packages wrapping msis
        - task: CopyFiles@2
          displayName: Prepare job-specific intermediate artifacts subdirectory
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)'
            Contents: |
              Shipping/**/*
              NonShipping/**/*
            TargetFolder: '$(Build.StagingDirectory)/IntermediateArtifacts/workloads'
            CleanTargetFolder: true
        # Delete wixpdb files before they are uploaded to artifacts
        - task: DeleteFiles@1
          displayName: Delete wixpdb's
          inputs:
            SourceFolder: $(Build.SourcesDirectory)/artifacts/workloadPackages
            Contents: '*.wixpdb'
        # Upload artifacts to be used for generating VS components
        - task: PublishPipelineArtifact@1
          displayName: Publish workload artifacts
          inputs:
            targetPath: $(Build.SourcesDirectory)/artifacts/VSSetup/$(_BuildConfig)/Insertion/
            artifactName: 'Workloads'
          continueOnError: true
          condition: always()
        - powershell: $(CheckNuGetSizesScript)
          displayName: Check NuGet sizes

############ POST BUILD ARCADE LOGIC ############
- ${{ if and(ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest')) }}:
  - template: /eng/common/templates/post-build/post-build.yml
    parameters:
      publishingInfraVersion: 3
      enableSourceLinkValidation: false
      enableSigningValidation: false
      enableSymbolValidation: false
      enableNugetValidation: true
